{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, USER_CHATS_STATE_CHANGE, CLEAR_DATA } from \"../constants/index\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function reload() {\n  return function (dispatch) {\n    dispatch(clearData());\n    dispatch(fetchUser());\n    dispatch(fetchUserPosts());\n    dispatch(fetchUserFollowing());\n    dispatch(fetchUserChats());\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot, error) {\n      console.log(\"fetchUser -> error\", error);\n\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: _objectSpread({\n            uid: firebase.auth().currentUser.uid\n          }, snapshot.data())\n        });\n      }\n    });\n  };\n}\nexport function fetchUserChats() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"chats\").where(\"users\", \"array-contains\", firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var chats = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_CHATS_STATE_CHANGE,\n        chats: chats\n      });\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"desc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.ZE.path.segments[3];\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/cerigoff/instagram_redesign_release_v1/frontend/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","USER_CHATS_STATE_CHANGE","CLEAR_DATA","firebase","require","clearData","dispatch","type","reload","fetchUser","fetchUserPosts","fetchUserFollowing","fetchUserChats","firestore","collection","doc","auth","currentUser","uid","onSnapshot","snapshot","error","console","log","exists","data","where","chats","docs","map","id","orderBy","get","then","posts","following","i","length","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","query","EP","path","segments","find","fetchUsersFollowingLikes","postId","ZE","currentUserLike"],"mappings":"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","sourcesContent":["import {\n    USER_STATE_CHANGE\n    , USER_POSTS_STATE_CHANGE\n    , USER_FOLLOWING_STATE_CHANGE\n    , USERS_DATA_STATE_CHANGE\n    , USERS_POSTS_STATE_CHANGE\n    , USERS_LIKES_STATE_CHANGE\n    , USER_CHATS_STATE_CHANGE\n    , CLEAR_DATA\n} from '../constants/index'\nimport firebase from 'firebase'\nrequire('firebase/firestore')\n\n\nexport function clearData() {\n    return ((dispatch) => {\n        dispatch({ type: CLEAR_DATA })\n    })\n}\nexport function reload() {\n    return ((dispatch) => {\n        dispatch(clearData())\n        dispatch(fetchUser())\n        dispatch(fetchUserPosts())\n        dispatch(fetchUserFollowing())\n        dispatch(fetchUserChats())\n\n    })\n}\nexport function fetchUser() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot, error) => {\n                console.log(\"fetchUser -> error\", error)\n\n                if (snapshot.exists) {\n\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: { uid: firebase.auth().currentUser.uid, ...snapshot.data() } })\n                }\n            })\n    })\n}\n\nexport function fetchUserChats() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"chats\")\n            .where(\"users\", \"array-contains\", firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                let chats = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                dispatch({ type: USER_CHATS_STATE_CHANGE, chats })\n            })\n    })\n}\nexport function fetchUserPosts() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"desc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\n            })\n    })\n}\n\n\nexport function fetchUserFollowing() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .onSnapshot((snapshot) => {\n                let following = snapshot.docs.map(doc => {\n                    const id = doc.id;\n                    return id\n                })\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\n                for (let i = 0; i < following.length; i++) {\n                    dispatch(fetchUsersData(following[i], true));\n                }\n            })\n    })\n}\n\nexport function fetchUsersData(uid, getPosts) {\n    return ((dispatch, getState) => {\n        const found = getState().usersState.users.some(el => el.uid === uid);\n        if (!found) {\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(uid)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\n                    }\n                })\n            if (getPosts) {\n                dispatch(fetchUsersFollowingPosts(uid));\n            }\n        }\n    })\n}\n\nexport function fetchUsersFollowingPosts(uid) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                const uid = snapshot.query.EP.path.segments[1];\n                const user = getState().usersState.users.find(el => el.uid === uid);\n\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data, user }\n                })\n\n                for (let i = 0; i < posts.length; i++) {\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\n                }\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\n\n            })\n    })\n}\n\nexport function fetchUsersFollowingLikes(uid, postId) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                const postId = snapshot.ZE.path.segments[3];\n\n                let currentUserLike = false;\n                if (snapshot.exists) {\n                    currentUserLike = true;\n                }\n\n                dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\n            })\n    })\n}"]},"metadata":{},"sourceType":"module"}